Q1. What is the purpose of Python's OOP?

Ans-In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. 
    It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming. 
    The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.

Q2. Where does an inheritance search look for an attribute?

Ans-An inheritance search looks for an attribute first in the instance object, 
    then in the class the instance was created from, then in all higher superclasses, progressing from left to right (by default)

Q3. How do you distinguish between a class object and an instance object?

Ans-A class is a template for creating objects in a program, whereas the object is an instance of a class. 
    A class is a logical entity, while an object is a physical entity. A class does not allocate memory space. 
    on the other hand, an object allocates memory space

Q4. What makes the first argument in a class’s method function special?

Ans-The calling process is automatic while the receiving process is not (its explicit). 
    This is the reason the first parameter of a function in class must be the object itself.

Q5. What is the purpose of the init method?

Ans-The __init__ method lets the class initialize the object's attributes and serves no other purpose.

Q6. What is the process for creating a class instance?

Ans-To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q7. What is the process for creating a class?

Ans-To create a class, use the keyword class

Q8. How would you define the superclasses of a class?

Ans-A superclass is the class from which many subclasses can be created. 
    The subclasses inherit the characteristics of a superclass. The superclass is also known as the parent class or base class. 
    In the above example, Vehicle is the Superclass and its subclasses are Car, Truck and Motorcycle.

Q9. What is the relationship between classes and modules?

Ans-Classes are blueprints that allow you to create instances with attributes and bound functionality. 
    Classes support inheritance, metaclasses, and descriptors.

    Modules can't do any of this, modules are essentially singleton instances of an internal module class, and all their globals are attributes on the module instance. 
    You can manipulate those attributes as needed (add, remove and update), but take into account that these still form the global namespace for all code defined in that module.

Q10. How do you make instances and classes?

Ans-call the class using class name and pass in whatever arguments its __init__ method accepts.

Q11. Where and how should be class attributes created?

Ans-Class attributes belong to the class itself they will be shared by all the instances. 
    Such attributes are defined in the class body parts usually at the top, for legibility.

Q12. Where and how are instance attributes created?

Ans-Instance attributes are defined in the constructor. Defined directly inside a class. 
    Defined inside a constructor using the self parameter.

Q13. What does the term "self" in a Python class mean?

Ans-The self parameter is a reference to the current instance of the class, 
    and is used to access variables that belongs to the class.

Q14. How does a Python class handle operator overloading?

Ans-The operator overloading in Python means provide extended meaning beyond their predefined operational meaning. Such as, we use the "+" operator for adding two integers as well as joining two strings or merging two lists.
    We can achieve this as the "+" operator is overloaded by the "int" class and "str" class.

Q15. When do you consider allowing operator overloading of your classes?

Ans-

Q16. What is the most popular form of operator overloading?

Ans-A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings. 
    It performs “Addition” on numbers whereas it performs “Concatenation” on strings.

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Ans-

Q18. Describe three applications for exception processing.

Ans-Exception-Base class for all exceptions
    StandardError-Base class for all built-in exceptions except StopIteration and SystemExit.
    AttributeError-Raised in case of failure of attribute reference or assignment.

Q19. What happens if you don't do something extra to treat an exception?

Ans-If we don't handle it, the program terminates abruptly and the code past the line that caused the exception will not get executed.

Q20. What are your options for recovering from an exception in your script?

Ans-You can also provide a generic except clause, which handles any exception. 
    After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception. 
    The else-block is a good place for code that does not need the try: block's protection.

Q21. Describe two methods for triggering exceptions in your script.

Ans-Try – This method catches the exceptions raised by the program. 
    Raise – Triggers an exception manually using custom exceptions.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?

Ans-The try statement allows you to define a block of code to be tested for errors while it is being executed.

Q24. What are the two most popular try statement variations?

Ans-Try/Except There are two other optional segments to a try block: else and finally . Both of these optional blocks will come after the try and the except . 

Q25. What is the purpose of the raise statement?

Ans-The raise keyword is used to raise an exception.

Q26. What does the assert statement do, and what other statement is it like?

Ans-The assert keyword is used when debugging code. The assert keyword lets you test if a condition in your code returns True, 
    if not, the program will raise an AssertionError.

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Ans-The with statement is a replacement for commonly used try/finally error-handling statements. 
    A common example of using the with statement is opening a file. 
    
Q28. What are *args, **kwargs?

Ans-*args passes variable number of non-keyworded arguments and on which operation of the tuple can be performed. 
    **kwargs passes variable number of keyword arguments dictionary to function on which operation of a dictionary can be performed.

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?

Ans-A lambda function is an anonymous function (i.e., defined without a name) that can take any number of arguments but, 
    unlike normal functions, evaluates and returns only one expression.

Q31. Explain Inheritance in Python with an example?

Ans-Inheritance relationship defines the classes that inherit from other classes as derived, subclass, or sub-type classes. Base class remains to be the source from which a subclass inherits. 
    For example, you have a Base class of “Animal,” and a “Lion” is a Derived class. The inheritance will be Lion is an Animal. 

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Ans-Two built-in functions isinstance() and issubclass() are used to check inheritances. 
    The function isinstance() returns True if the object is an instance of the class or other classes derived from it.

Q34.Explain the use of the 'nonlocal' keyword in Python.

Ans-The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function. 
    Use the keyword nonlocal to declare that the variable is not local.

Q35. What is the global keyword?

Ans-In Python, the global keyword allows us to modify the variable outside of the current scope. 
    It is used to create a global variable and make changes to the variable in a local context.